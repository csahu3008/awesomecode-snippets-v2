import ProviderWrapper from "./client";
import { Header } from "./components/Header";
import { Toaster } from "./components/ui/sonner";
import { GlobalContextProvider } from "./context";
import "./globals.css";
import { SessionProvider } from "next-auth/react";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
  session,
  ...pageProps
}: Readonly<{
  children: React.ReactNode;
  session: Session | null;
}>) {
  // const [currentPage, setcurrentPage] = useState<Page>('overview');
  //   const [selectedSnippetId, setSelectedSnippetId] = useState<string>('');
  //   const [isDarkMode, setIsDarkMode] = useState(false);
  //   const [user, setUser] = useState<User | null>(null);

  //   // Load user from localStorage on app start
  //   useEffect(() => {
  //     const savedUser = localStorage.getItem('awesomecodesnippets_user');
  //     if (savedUser) {
  //       try {
  //         setUser(JSON.parse(savedUser));
  //       } catch (error) {
  //         localStorage.removeItem('awesomecodesnippets_user');
  //       }
  //     }
  //   }, []);

  //   // Save user to localStorage when user state changes
  //   useEffect(() => {
  //     if (user) {
  //       localStorage.setItem('awesomecodesnippets_user', JSON.stringify(user));
  //     } else {
  //       localStorage.removeItem('awesomecodesnippets_user');
  //     }
  //   }, [user]);

  //   const handleNavigate = (page: Page, snippetId?: string) => {
  //     setcurrentPage(page);
  //     if (snippetId) {
  //       setSelectedSnippetId(snippetId);
  //     }
  //   };

  //   const toggleDarkMode = () => {
  //     setIsDarkMode(!isDarkMode);
  //     document.documentElement.classList.toggle('dark');
  //   };

  //   const handleLogin = (userData: User) => {
  //     setUser(userData);
  //   };

  //   const handleLogout = () => {
  //     setUser(null);
  //   };
  return (
    <html lang="en" className="dark">
      <ProviderWrapper session={session}>
        <GlobalContextProvider>
          <body>
            {/* <body className={`${geistSans.variable} ${geistMono.variable} font-sans`}> */}
            <div
              className={`min-h-screen bg-background text-foreground ${
                false ? "dark" : ""
              }`}
            >
              <Header />
              <main className="w-full">{children}</main>
              <Toaster />
            </div>
          </body>
        </GlobalContextProvider>
      </ProviderWrapper>
    </html>
  );
}
